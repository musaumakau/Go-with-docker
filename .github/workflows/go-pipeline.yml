
#gitworkflow
name: Create and build docker image to Docker Hub

on:
  push:
    branches: ["main"]

env: 
  REGISTRY: docker.io
  IMAGE_NAME: "5936/memesoftheday-image"
  USER: 5936
  VERSION: main
  TAG: Go-app

jobs:
  push_to_registry:
    name: Push Image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: checkout the repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
            username: ${{secrets.DOCKERHUB_USERNAME}}
            password: ${{secrets.DOCKERHUB_PASSWORD}}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
              images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build & push the image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  Scan:
        needs: [push_to_registry]
        runs-on: ubuntu-latest
        steps:
          - name: Run Trivy vulnerability scanner
            uses: aquasecurity/trivy-action@master
            with:
              image-ref: '${{ env.REGISTRY}}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}'
              format: 'table'
              ignore-unfixed: true
              vuln-type: 'os,library'
              severity: 'CRITICAL,HIGH'

  deploy:
        runs-on: ubuntu-latest
        steps:
           - name: Checkout code
             uses: actions/checkout@v2
              
           - name: Configure AWS credentials
             uses: aws-actions/configure-aws-credentials@v2
             with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: eu-west-1 # replace with your AWS region
              
           - name: Install kubectl
             run: |
                    sudo apt-get update && sudo apt-get install -y apt-transport-https gnupg
                    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
                    echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
                    sudo apt-get update
                    sudo apt-get install -y kubectl
                    
           - name: Configure kubectl
             uses: azure/k8s-set-context@v1
             with:
                  kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}
              
           - name: Deploy to EKS
             run: |
                   kubectl apply -f k8s/ 
              
                
          
     
        

